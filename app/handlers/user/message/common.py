import logging

from aiogram import F, Router
from aiogram.types import Message
from aiogram_dialog import DialogManager, StartMode

from app.models.config import AppConfig
from app.dialogs.states import MoreFuncStates, OptionsSearchSportsman, ProfileDialog, PremiumDialog
# from app.factory import GptClient
from app.keyboards.user.inline import get_diary_keyboard
from app.keyboards.user.reply import get_social_network_reply_menu, get_main_menu

# if TYPE_CHECKING:
#     from app.factory import GptClient

common_router = Router()
logger = logging.getLogger()


# @common_router.message()
# async def go_gpt(message: Message, gpt) -> None:
#     await message.answer("wait pls...")
#     answer = await gpt.response(message.text)
#     await message.answer(f"{answer}")
#     await message.answer_photo()


@common_router.message(F.text == "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π")
async def go_sportsmen_menu(
        _: Message,
        dialog_manager: DialogManager
) -> None:
    await dialog_manager.start(
        state=OptionsSearchSportsman.select,
        mode=StartMode.RESET_STACK
    )


@common_router.message(F.text == "–î–Ω–µ–≤–Ω–∏–∫ üìï")
async def get_diary_user(message: Message) -> None:
    await message.answer(
        "–¢—É—Ç –º–± —Ñ–æ—Ç–∫–∞"
    )
    await message.answer(
        "–¢—É—Ç —Ç–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫",
        reply_markup=get_diary_keyboard()
    )


@common_router.message(F.text == "–ó–∞–º–µ—Ç–∫–∏")
async def get_notes_user(message: Message) -> None:
    await message.answer(
        "<b><i><u>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</u></i></b>"
    )


@common_router.message(F.text == "–û –±–æ—Ç–µ")
async def get_info_about_bot(
        _: Message,
        dialog_manager: DialogManager
) -> None:
    # await message.answer(
    #     "<b><i><u>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</u></i></b>"
    # )
    await dialog_manager.start(
        state=MoreFuncStates.menu
    )


@common_router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å ü¶Å")
async def get_profile_user(
        _: Message,
        dialog_manager: DialogManager
) -> None:
    await dialog_manager.start(state=ProfileDialog.menu)
    # user = await db.users.get_user(message.from_user.id)
    #
    # if user.user_photo:
    #     profile_photo = user.user_photo
    # else:
    #     profile_photo = "CgACAgIAAxkBAAIEbWa1QHfh1xIpDDx_0-PW_tGVBt2VAAJIVgACn6SpSTx8bQABbPLoxTUE"
    #
    # premium_options = ["–ö—É–ø–ª–µ–Ω–∞", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"]
    # premium_status = premium_options[user.premium]
    # count_days = datetime.now().date() - user.created.date()
    #
    # info_text = (
    #     f"<b>üîë ID:</b> <code>{user.user_id}</code>\n"
    #     f"<b>‚ú® –ü–æ–¥–ø–∏—Å–∫–∞:</b> <u>{premium_status}</u>\n"
    #     f"<b>üï∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user.created.date()} (<i>{count_days.days} –¥–Ω.</i>)\n"
    #     f"<b>‚åõÔ∏è –û—Å—Ç–∞–ª–æ—Å—å:</b> <i>14 –¥–Ω.</i>"
    # )
    #
    # try:
    #     await message.answer_animation(
    #         animation=profile_photo,
    #         caption=info_text,
    #         reply_markup=get_profile_menu(premium=user.premium)
    #     )
    # except TelegramBadRequest as error:
    #     logger.error("Error %s(%s)", error, type(error))
    #     await message.answer_photo(
    #         photo=profile_photo,
    #         caption=info_text,
    #         reply_markup=get_profile_menu(premium=user.premium)
    #     )


@common_router.message(F.text == "–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë®‚Äçüíª")
async def get_contact_support(message: Message, config: AppConfig) -> None:
    await message.answer(
        f"–°—Å—ã–ª–∫–∞ –Ω–µ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É: {config.common.support_url}"
    )


@common_router.message(F.text == "–î—Ä—É–≥–æ–µ ü§ü")
async def get_more_func_handler(
        _: Message,
        dialog_manager: DialogManager
) -> None:
    await dialog_manager.start(MoreFuncStates.menu)


@common_router.message(F.text == "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠êÔ∏è")
async def get_favorites_user(message: Message) -> None:
    await message.answer(
        "<b><i><u>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...üõ†</u></i></b>"
    )


@common_router.message(F.text == "–°–æ—Ü. —Å–µ—Ç—å ü§©")
async def open_our_social_network(message: Message) -> None:
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å!\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö, —Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!",
        reply_markup=get_social_network_reply_menu()
    )


@common_router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô")
async def back_to_main_menu(message: Message) -> None:
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu()
    )


@common_router.message(F.text == "–ú–∞–≥–∞–∑–∏–Ω")
async def get_market(message: Message) -> None:
    await message.answer(
        "<b><i><u>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</u></i></b>"
    )


@common_router.message(F.text == "–§–∏—Ç–Ω–µ—Å –∑–∞–ª—ã")
async def get_fitness_gym(message: Message) -> None:
    await message.answer(
        "<b><i><u>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</u></i></b>"
    )


@common_router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìô")
async def get_manual(message: Message) -> None:
    await message.answer(
        "<b><i><u>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</u></i></b>"
    )


@common_router.message(F.text == "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üíµ")
async def get_info_about_subscribe(
        _: Message,
        dialog_manager: DialogManager
) -> None:
    await dialog_manager.start(
        state=PremiumDialog.level,
        mode=StartMode.RESET_STACK
    )
    # await message.answer(
    #     "–ï—Å—Ç—å 3 —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏:\n"
    #     "<b>- –ù–æ–≤–∏—á–æ–∫</b> (399‚ÇΩ)\n"
    #     "<i><u>–¢—É—Ç –æ–ø–∏—Å–∞–Ω–∏–µ</u></i>\n\n"
    #     "<b>- –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</b> (899‚ÇΩ)\n"
    #     "<i><u>–¢—É—Ç –æ–ø–∏—Å–∞–Ω–∏–µ</u></i>\n\n"
    #     "<b>- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª</b> (1499‚ÇΩ)\n"
    #     "<i><u>–¢—É—Ç –æ–ø–∏—Å–∞–Ω–∏–µ</u></i>",
    #     reply_markup=get_levels_subscribe()
    # )


@common_router.message(F.sticker)
async def send_sticker_id(message: Message) -> None:
    await message.answer(
        f"{message.sticker.file_id}"
    )


@common_router.message(F.video)
async def send_video_id(message: Message) -> None:
    await message.answer(
        f"{message.video.file_id}"
    )

# @common_router.message(F.photo)
# async def send_photo_id(message: Message) -> None:
#     await message.answer(
#         f"{message.photo[-1].file_id}"
#     )
